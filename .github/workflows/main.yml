name: CI/CD with SonarCloud

on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  

      - name: Set_up_JDK 11
        uses: actions/setup-java@v1
        with:
           java-version: 11  # Use the appropriate Java version

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
   #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      # - name: Build with Maven
      #   run: mvn clean install

      # - name: Run SonarCloud Analysis
      #   run: |
      #     mvn clean verify sonar:sonar \
      #       -Dsonar.projectKey=vaibhav-kadam-13 
      #       -Dsonar.organization=$SONAR_ORGANIZATION 
      #       -Dsonar.login=$SONAR_TOKEN
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

# name: Build
# on:
#   push:
#     branches:
#       - main # the name of your main branch
#   pull_request:
#     types: [opened, synchronize, reopened]
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 11
#       - name: Cache SonarQube packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.sonar/cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache Maven packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#           SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#         run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

# Add any additional steps for deployment or notifications as needed
# name: cicd
# on:
#   push:
#     branches:
#       - master
 
# jobs:
#   sonarcloud:
#     name: SonarCloud
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
    
#      

#       - name: Build with maven
#         run: mvn clean package
         
      
#       - name: Cache Maven packages
#         uses: actions/cache@v1
#         with:
#           path: ~/.m2
#           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#           restore-keys: ${{ runner.os }}-m2
#       - name: Sonarcloud Scan
#         uses: sonarsource/sonarcloud-github-action@master
#         env:
#              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#      #      SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
     
#      #   run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

#       # - name: check out code
#       #   uses: actions/checkout@v2
        
#       # - name: Configure AWS credentials
#       #   uses: aws-actions/configure-aws-credentials@v1
#       #   with:
#       #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #        aws-region: ap-south-1

#       # - name: Login to Amazon ECR
#       #   id: login-ecr
#       #   uses: aws-actions/amazon-ecr-login@v1

#       # - name: Build, tag, and push image to Amazon ECR
#       #   id: build-image
#       #   env:
#       #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#       #         ECR_REPOSITIORY: demo3
#       #         IMAGE_TAG: ${{ github.sha }}
#       #       #run: |
#       #     # Build a docker container and
#       #     # push it to ECR so that it can
#       #     # be deployed to ECS.
#       #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#       #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#       #    # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#       #   #  echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        
        
